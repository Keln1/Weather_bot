import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta

from database import set_city, set_notify_time, get_user_settings, get_all_users
from weather_api import get_current_weather, get_forecast_5days
from scheduler import scheduler, send_daily_weather

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CityState(StatesGroup):
    waiting_for_city = State()


class NotifyTimeState(StatesGroup):
    waiting_for_time = State()


class NotifyDaysState(StatesGroup):
    waiting_for_days = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå¶ –ü–æ–≥–æ–¥–∞", callback_data="menu_weather")],
        [InlineKeyboardButton(text="üèô –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="menu_set_city")],
        [InlineKeyboardButton(text="‚è∞ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="menu_notifications")]
    ])
    return kb


def weather_menu_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå§ –ó–∞—Ä–∞–∑", callback_data="weather_current"),
         InlineKeyboardButton(text="üìÖ 5 –¥–Ω—ñ–≤", callback_data="weather_5days")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return kb


def notifications_menu_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∞ –ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å", callback_data="menu_set_notify")],
        [InlineKeyboardButton(text="üìÖ –î–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å", callback_data="menu_set_days")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return kb


# –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    welcome_text = (
        "üëã *–í—ñ—Ç–∞—é!*\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–æ–≥–æ–¥–Ω–∏–π –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É üå§ "
        "—Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤ üìÖ.\n\n"
        "üîπ *–û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:*\n"
        "‚Ä¢ –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é\n"
        "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 5 –¥–Ω—ñ–≤\n"
        "‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É\n"
        "‚Ä¢ –ì–Ω—É—á–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —Ç–∞ –¥–Ω—ñ–≤ —Å–ø–æ–≤—ñ—â–µ–Ω—å\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:"
    )
    await message.answer(welcome_text, reply_markup=main_menu_keyboard())


@router.message(Command("weather"))
async def cmd_weather(message: Message):
    user_id = message.from_user.id
    city, _ = get_user_settings(user_id)
    if not city:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ!", reply_markup=main_menu_keyboard())
        return
    weather_text = await get_current_weather(city)
    await message.answer(weather_text, reply_markup=weather_menu_keyboard())


@router.callback_query(F.data == "back_to_main")
async def callback_main_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu_keyboard())


@router.callback_query(F.data == "menu_weather")
async def callback_menu_weather(call: CallbackQuery):
    await call.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å, —è–∫—É –ø–æ–≥–æ–¥—É –ø–æ–∫–∞–∑–∞—Ç–∏:", reply_markup=weather_menu_keyboard())


@router.callback_query(F.data == "menu_set_city")
async def callback_menu_set_city(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "üèô *–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞*\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "‚Ä¢ –ö–∏—ó–≤\n"
        "‚Ä¢ –õ—å–≤—ñ–≤\n"
        "‚Ä¢ –•–∞—Ä–∫—ñ–≤\n"
        "‚Ä¢ –û–¥–µ—Å–∞\n\n"
        "–ú–æ–∂–Ω–∞ –≤–≤–æ–¥–∏—Ç–∏ –º—ñ—Å—Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é."
    )
    await state.set_state(CityState.waiting_for_city)


@router.callback_query(F.data == "menu_notifications")
async def callback_menu_notifications(call: CallbackQuery):
    await call.message.edit_text("üîî *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å*", reply_markup=notifications_menu_keyboard())


@router.callback_query(F.data == "menu_set_notify")
async def callback_menu_set_notify(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "‚è∞ *–í–∫–∞–∂—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å*\n\n"
        "–§–æ—Ä–º–∞—Ç: HH:MM (24-–≥–æ–¥–∏–Ω–Ω–∏–π)\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "‚Ä¢ 09:00\n"
        "‚Ä¢ 18:30\n\n"
        "–ë–æ—Ç –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ —â–æ–¥–Ω—è –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å."
    )
    await state.set_state(NotifyTimeState.waiting_for_time)


@router.callback_query(F.data == "menu_set_days")
async def callback_menu_set_days(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "üìÖ *–í–∫–∞–∂—ñ—Ç—å –¥–Ω—ñ —Ç–∏–∂–Ω—è –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å*\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –¥–Ω—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É (1-7):\n"
        "1 - –ü–æ–Ω–µ–¥—ñ–ª–æ–∫\n"
        "2 - –í—ñ–≤—Ç–æ—Ä–æ–∫\n"
        "3 - –°–µ—Ä–µ–¥–∞\n"
        "4 - –ß–µ—Ç–≤–µ—Ä\n"
        "5 - –ü'—è—Ç–Ω–∏—Ü—è\n"
        "6 - –°—É–±–æ—Ç–∞\n"
        "7 - –ù–µ–¥—ñ–ª—è\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1,2,3,4,5"
    )
    await state.set_state(NotifyDaysState.waiting_for_days)


@router.callback_query(F.data == "weather_current")
async def callback_weather_current(call: CallbackQuery):
    user_id = call.from_user.id
    city, _ = get_user_settings(user_id)
    if not city:
        await call.message.edit_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ!", reply_markup=main_menu_keyboard())
        return
    weather_text = await get_current_weather(city)
    await call.message.edit_text(text=weather_text, parse_mode="Markdown", reply_markup=weather_menu_keyboard())


@router.callback_query(F.data == "weather_5days")
async def callback_weather_5days(call: CallbackQuery):
    user_id = call.from_user.id
    city, _ = get_user_settings(user_id)
    if not city:
        await call.message.edit_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ!", reply_markup=main_menu_keyboard())
        return
    forecast_text = await get_forecast_5days(city)
    await call.message.edit_text(text=forecast_text, parse_mode="Markdown", reply_markup=weather_menu_keyboard())


@router.message(CityState.waiting_for_city)
async def city_input(message: Message, state: FSMContext):
    city = message.text.strip()
    set_city(message.from_user.id, city)
    await message.answer(
        f"‚úÖ –ú—ñ—Å—Ç–æ *{city.title()}* –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
        f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞.",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()


@router.message(NotifyTimeState.waiting_for_time)
async def notify_time_input(message: Message, state: FSMContext):
    time_str = message.text.strip()
    pattern = r"^([0-1]\d|2[0-3]):([0-5]\d)$"
    if not re.match(pattern, time_str):
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É!\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 09:00"
        )
        return
    
    set_notify_time(message.from_user.id, time_str)
    job_id = f"user_{message.from_user.id}"
    try:
        scheduler.remove_job(job_id)
    except:
        pass
    
    hour, minute = time_str.split(":")
    scheduler.add_job(
        send_daily_weather,
        trigger='cron',
        hour=int(hour),
        minute=int(minute),
        args=[message.bot, message.from_user.id],
        id=job_id,
        replace_existing=True
    )
    
    await message.answer(
        f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"–ë–æ—Ç –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ —â–æ–¥–Ω—è –æ {time_str}.",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()


@router.message(NotifyDaysState.waiting_for_days)
async def notify_days_input(message: Message, state: FSMContext):
    days_str = message.text.strip()
    try:
        days = [int(d.strip()) for d in days_str.split(",")]
        if not all(1 <= d <= 7 for d in days):
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—ñ–≤!\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 7 —á–µ—Ä–µ–∑ –∫–æ–º—É.\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1,2,3,4,5"
        )
        return
    
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–Ω—ñ–≤ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
    days_names = {
        1: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
        2: "–í—ñ–≤—Ç–æ—Ä–æ–∫",
        3: "–°–µ—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä",
        5: "–ü'—è—Ç–Ω–∏—Ü—è",
        6: "–°—É–±–æ—Ç–∞",
        7: "–ù–µ–¥—ñ–ª—è"
    }
    days_text = ", ".join(days_names[d] for d in sorted(days))
    
    await message.answer(
        f"‚úÖ –î–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"–ë–æ—Ç –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –≤ —Ç–∞–∫—ñ –¥–Ω—ñ:\n"
        f"{days_text}",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()
