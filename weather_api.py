import aiohttp
from config import OPENWEATHER_API_KEY, OPENWEATHER_BASE_URL
from datetime import datetime
import pytz

def get_weather_emoji(weather_id: int) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ–≥–æ–¥–Ω–∏—Ö —É–º–æ–≤."""
    if weather_id >= 200 and weather_id < 300:
        return "‚õà"  # –ì—Ä–æ–∑–∞
    elif weather_id >= 300 and weather_id < 400:
        return "üåß"  # –ú—Ä—è–∫–∞
    elif weather_id >= 500 and weather_id < 600:
        return "üåß"  # –î–æ—â
    elif weather_id >= 600 and weather_id < 700:
        return "‚ùÑÔ∏è"  # –°–Ω—ñ–≥
    elif weather_id >= 700 and weather_id < 800:
        return "üå´"  # –¢—É–º–∞–Ω
    elif weather_id == 800:
        return "‚òÄÔ∏è"  # –Ø—Å–Ω–æ
    elif weather_id > 800:
        return "‚òÅÔ∏è"  # –•–º–∞—Ä–Ω–æ
    return "üå§"

def format_wind_direction(degrees: float) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –≥—Ä–∞–¥—É—Å–∏ –≤ –Ω–∞–ø—Ä—è–º–æ–∫ –≤—ñ—Ç—Ä—É."""
    directions = ['–ü–Ω', '–ü–Ω–°—Ö', '–°—Ö', '–ü–¥–°—Ö', '–ü–¥', '–ü–¥–ó—Ö', '–ó—Ö', '–ü–Ω–ó—Ö']
    index = round(degrees / 45) % 8
    return directions[index]

async def get_current_weather(city: str, lang: str = "uk") -> str:
    """–ó–∞–ø–∏—Ç—É—î –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –≤ –º—ñ—Å—Ç—ñ."""
    url = f"{OPENWEATHER_BASE_URL}/weather"
    params = {
        "q": city,
        "appid": OPENWEATHER_API_KEY,
        "units": "metric",
        "lang": lang
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as response:
                data = await response.json()
                if response.status != 200:
                    return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {data.get('message', '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É')}"
                
                weather_id = data["weather"][0]["id"]
                weather_emoji = get_weather_emoji(weather_id)
                weather_desc = data["weather"][0]["description"].capitalize()
                temp = round(data["main"]["temp"])
                feels_like = round(data["main"]["feels_like"])
                humidity = data["main"]["humidity"]
                pressure = round(data["main"]["pressure"] * 0.750062)  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º–º —Ä—Ç.—Å—Ç.
                wind_speed = round(data["wind"]["speed"], 1)
                wind_deg = data["wind"]["deg"]
                wind_dir = format_wind_direction(wind_deg)
                clouds = data["clouds"]["all"]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —á–∞—Å —Å—Ö–æ–¥—É/–∑–∞—Ö–æ–¥—É —Å–æ–Ω—Ü—è
                sunrise = datetime.fromtimestamp(data["sys"]["sunrise"])
                sunset = datetime.fromtimestamp(data["sys"]["sunset"])
                timezone = pytz.timezone('Europe/Kiev')
                sunrise = sunrise.astimezone(timezone)
                sunset = sunset.astimezone(timezone)
                
                return (
                    f"{weather_emoji} *–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ {city.title()}*\n\n"
                    f"*{weather_desc}*\n\n"
                    f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:*\n"
                    f"‚Ä¢ –ó–∞—Ä–∞–∑: {temp}¬∞C\n"
                    f"‚Ä¢ –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {feels_like}¬∞C\n\n"
                    f"üí® *–í—ñ—Ç–µ—Ä:*\n"
                    f"‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å: {wind_speed} –º/—Å\n"
                    f"‚Ä¢ –ù–∞–ø—Ä—è–º–æ–∫: {wind_dir}\n\n"
                    f"üíß *–í–æ–ª–æ–≥—ñ—Å—Ç—å:* {humidity}%\n"
                    f"‚òÅÔ∏è *–•–º–∞—Ä–Ω—ñ—Å—Ç—å:* {clouds}%\n"
                    f"üå° *–¢–∏—Å–∫:* {pressure} –º–º —Ä—Ç.—Å—Ç.\n\n"
                    f"üåÖ *–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è:* {sunrise.strftime('%H:%M')}\n"
                    f"üåá *–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è:* {sunset.strftime('%H:%M')}\n"
                )
    except aiohttp.ClientError:
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏."

async def get_forecast_5days(city: str, lang: str = "uk") -> str:
    """–ó–∞–ø–∏—Ç—É—î 5-–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ —Ç–∞ –≥—Ä—É–ø—É—î –¥–∞–Ω—ñ –∑–∞ –¥–Ω—è–º–∏."""
    url = f"{OPENWEATHER_BASE_URL}/forecast"
    params = {
        "q": city,
        "appid": OPENWEATHER_API_KEY,
        "units": "metric",
        "lang": lang
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as response:
                data = await response.json()
                if response.status != 200:
                    return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {data.get('message', '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑')}"
                
                forecast_list = data.get("list", [])
                if not forecast_list:
                    return "‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—É."

                from collections import defaultdict
                grouped = defaultdict(list)
                for entry in forecast_list:
                    date = entry["dt_txt"].split(" ")[0]
                    grouped[date].append(entry)

                days = sorted(grouped.keys())
                from datetime import datetime
                lines = [f"üìÖ *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 5 –¥–Ω—ñ–≤ —É {city.title()}*\n"]
                
                for day in days[:5]:
                    entries = grouped[day]
                    chosen = next((entry for entry in entries if "12:00:00" in entry["dt_txt"]), entries[0])
                    dt_obj = datetime.strptime(day, "%Y-%m-%d")
                    formatted_date = dt_obj.strftime("%d.%m.%Y")
                    weather_id = chosen["weather"][0]["id"]
                    weather_emoji = get_weather_emoji(weather_id)
                    desc = chosen["weather"][0]["description"].capitalize()
                    temp = round(chosen["main"]["temp"])
                    temp_min = round(chosen["main"]["temp_min"])
                    temp_max = round(chosen["main"]["temp_max"])
                    wind_speed = round(chosen["wind"]["speed"], 1)
                    wind_deg = chosen["wind"]["deg"]
                    wind_dir = format_wind_direction(wind_deg)
                    humidity = chosen["main"]["humidity"]
                    clouds = chosen["clouds"]["all"]
                    
                    lines.append(
                        f"\n{weather_emoji} *{formatted_date}*\n"
                        f"*{desc}*\n"
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"   –ú—ñ–Ω: {temp_min}¬∞C, –ú–∞–∫—Å: {temp_max}¬∞C\n"
                        f"üí® –í—ñ—Ç–µ—Ä: {wind_speed} –º/—Å ({wind_dir})\n"
                        f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n"
                        f"‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {clouds}%\n"
                        f"{'‚îÄ' * 20}"
                    )
                return "\n".join(lines)
    except aiohttp.ClientError:
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ —Å–µ—Ä–≤—ñ—Å—É –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏."
